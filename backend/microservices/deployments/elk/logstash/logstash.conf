input {
    tcp {
        port => 5000
        codec => multiline {
            pattern => "^@<START>@"
            negate => true
            what => "previous"

        }
        mode => server
    }
}

filter{
    grok{
        match => ["message", "@<START>@ - <LEVEL>[{LOGLEVEL:levelName} : {NUMBER:levelNo}] - <SERVICE>[{USERNAME:serviceName} : {POSINT:serviceNo}] - <PROCESS>[{USERNAME:processName} : {POSINT:processId}] - <THREAD>[{USERNAME:threadName} : {POSINT:threadId}] - {USERNAME:taskName} - <PHYSICAL_LOC>[{PATH:path} : {NOTSPACE:module} : {POSINT:lineno} : {WORD:functionName}]  - <TIME>[{GREEDYDATA:ascTime} : {TIMESTAMP_ISO8601:timeStamp} : {BASE16FLOAT:created} : {POSINT:relativeCreated} : {POSINT:msecs}] - <MSG>{message}</MSG> - <ADDITIONAL>[{GREEDYDATA:excField} : {GREEDYDATA:stackField}] - <END>"]
    }
    
    aggregate{
        task_id => "%{serviceName}-%{processId}-%{threadId}"
        code => "
            map['serviceName'] ||= event.get('serviceName')
            map['processId'] ||= event.get('processId')
            map['threadId'] ||= event.get('threadId')
            map['levelName'] ||= event.get('levelName')
            map['@timestamp'] ||= event.get('timeStamp')
            map['path'] ||= event.get('path')
            map['module'] ||= event.get('module')
            map['lineno'] ||= event.get('lineno')
            map['functionName'] ||= event.get('functionName')
            map['message'] ||= event.get('message')
            map['excField'] ||= event.get('excField')
            map['stackField'] ||= event.get('stackField')
            map['ascTime'] ||= event.get('ascTime')
            map['created'] ||= event.get('created')
            map['relativeCreated'] ||= event.get('relativeCreated')
            map['msecs'] ||= event.get('msecs')
            map['levelNo'] ||= event.get('levelNo')
            map['serviceNo'] ||= event.get('serviceNo')
            map['taskName'] ||= event.get('taskName')
            map['threadName'] ||= event.get('threadName')
            map['message'] ||= event.get('message')
    
        "
        push_previous_as_event => true
        timeout_task_id => 120
    }
}

output{
    elasticsearch{
        hosts => "elasticsearch:9200"
        user => ${ELASTICSEARCH_USER}
        password => ${ELASTICSEARCH_PASSWORD}
    }
    stdout {
        codec => rubydebug
    }
}